clust_min <<- 1
clust_max <<- s
data_k <- n %>%
list(r,rho,b) %>%
purrr::pmap(.f = function(.n,.r,.rho,.b){
a_rows <- clust_min:clust_max
clust_iter <<- clust_iter + 1
clust_min <<- clust_max+1
clust_max <<- clust_iter*s
sim <- sim_sarrs(.n,nvld,.n,a_rows,p,m,.r,.rho,sigma,.b)
A <- sim %>%
purrr::pluck("A")
S <- sim %>%
purrr::pluck("sig")
X <- sim %>%
purrr::pluck("X")
Y <- sim %>%
purrr::pluck("Y")
return(list(X=X,Y=Y,A=A,S=S))
})
n %>%
list(r,rho,b)
clust_assign_true
rand_assign
int
prob
prob
prob <- rep(1/k, k)
prob
num_pert <- 0.2
N <- 50
PROB <- 0.5
k <- 3
sigma <- 1
p <- 50
m <- 50
s <-5
R <- 1
B <- 1
replication <- 1
chains <- 100
lam <- 1
maxiter <- 100
nvld <- 1e4
rho <- rep(0,k)
b <- rep(B, k)
r <- rep(R, k)
prob <- rep(1/k, k)
params <- list(
chains = chains,
lam = lam,
maxiter = maxiter,
nvld = nvld,
num_pert = num_pert,
N = N,
prob = prob,
k = k,
sigma = sigma,
p = p,
rho = rho,
m = m,
s = s,
r = r,
b = b)
sim_result <- simulate_hthmix(params)
library(dplyr)
future::plan("multisession",workers = 7)
source("./functions/20210205_sarrs_alex.R")
source("./simulations/20210304_large_sim_alex.R")
set.seed(19921124)
num_pert <- c(0.05,0.1,0.2)
N <- c(50, 100, 200, 400)
PROB <- 0.5
k <- 2:8
sigma <- c(0.5,1,2)
p <- c(50, 100, 1000, 10000)
m <- c(50, 100, 1000, 10000)
s <- c(5, 10, 20)
R <- 1:5
B <- c(1, 5, 10)
replication <- 1:2
sim_param <- expand.grid(
num_pert = num_pert,
N = N,
PROB = PROB,
k = k,
sigma = sigma,
p = p,
m = m,
s = s,
R = R,
B = B,
replication = replication
)
tictoc::tic()
result <- sim_param %>%
sample_n(30) %>%
# slice(c(1:5)) %>%
as.list() %>%
furrr::future_pmap_dfr(
# purrr::pmap_dfr(
.options = furrr::future_options(seed = TRUE),
.f = function( num_pert,
N,
PROB,
k,
sigma,
p,
m,
s,
R,
B,
replication){
chains <- 100
lam <- 1
maxiter <- 100
nvld <- 1e4
rho <- rep(0,k)
b <- rep(B, k)
r <- rep(R, k)
prob <- rep(1/k, k)
params <- list(
chains = chains,
lam = lam,
maxiter = maxiter,
nvld = nvld,
num_pert = num_pert,
N = N,
prob = prob,
k = k,
sigma = sigma,
p = p,
rho = rho,
m = m,
s = s,
r = r,
b = b)
sim_result <- simulate_hthmix(params)
result <- tibble(
num_pert,
N,
PROB,
k,
sigma,
p,
m,
s,
R,
B,
replication
) %>%
bind_cols(sim_result)
return(result)
}
)
tictoc::toc()
18489.7/60
18489.7/3600
result
profvis::profvis({result_final <- sim_param %>%
# filter(k==8 & num_pert == 0.2 & N == 50 & sigma == 1 & p == 1000 & m == 1000 & R == 1 & s == 5 & B == 1 & replication == 1) %>%
# sample_n(30) %>%
slice(c(1)) %>%
as.list() %>%
# furrr::future_pmap_dfr(
purrr::pmap_dfr(
# .options = furrr::future_options(seed = TRUE),
# .progress = TRUE,
.f = function( num_pert,
N,
PROB,
k,
sigma,
dim,
s,
R,
B,
replication){
chains <- 3
lam <- 1
maxiter <- 100
nvld <- 1e4
rho <- rep(0,k)
b <- rep(B, k)
r <- rep(R, k)
prob <- rep(1/k, k)
p <- m <- dim
params <- list(
chains = chains,
lam = lam,
maxiter = maxiter,
nvld = nvld,
num_pert = num_pert,
N = N,
prob = prob,
k = k,
sigma = sigma,
p = p,
rho = rho,
m = m,
s = s,
r = r,
b = b)
print(params)
sim_result <- safe_result(params)
if(is.null(sim_result$result)){
result <- tibble(
num_pert,
N,
PROB,
k,
sigma,
p,
m,
s,
R,
B,
replication,
error = paste(sim_result$error),
llik_1 = NA,
llik_2 = NA,
llik_3 = NA,
chain_1 = NA,
chain_2 = NA,
chain_3 = NA,
acc_1 = NA,
acc_2 = NA,
acc_3 = NA
)
} else {
result <- tibble(
num_pert,
N,
PROB,
k,
sigma,
p,
m,
s,
R,
B,
replication,
error = NULL,
) %>%
bind_cols(sim_result)
}
return(result)
}
)})
library(dplyr)
# future::plan("multisession",workers = 7)
source("./functions/20210205_sarrs_alex.R")
source("./simulations/20210304_large_sim_alex.R")
set.seed(19921124)
num_pert <- c(0.2)
N <- c(50, 100, 200, 400)
PROB <- 0.5
k <- 2:3
sigma <- c(1)
# p <- c(50, 100, 1000, 10000)
# m <- c(50, 100, 1000, 10000)
dim <- c(50, 100, 1000)
s <- c(5, 10, 20)
R <- 1:2 #up to 3
B <- c(1)
replication <- 1
safe_result <- purrr::safely(simulate_hthmix)
sim_param <- expand.grid(
num_pert = num_pert,
N = N,
PROB = PROB,
k = k,
sigma = sigma,
# p = p,
# m = m,
dim = dim,
s = s,
R = R,
B = B,
replication = replication
)
profvis::profvis({result_final <- sim_param %>%
# filter(k==8 & num_pert == 0.2 & N == 50 & sigma == 1 & p == 1000 & m == 1000 & R == 1 & s == 5 & B == 1 & replication == 1) %>%
# sample_n(30) %>%
slice(c(1)) %>%
as.list() %>%
# furrr::future_pmap_dfr(
purrr::pmap_dfr(
# .options = furrr::future_options(seed = TRUE),
# .progress = TRUE,
.f = function( num_pert,
N,
PROB,
k,
sigma,
dim,
s,
R,
B,
replication){
chains <- 3
lam <- 1
maxiter <- 100
nvld <- 1e4
rho <- rep(0,k)
b <- rep(B, k)
r <- rep(R, k)
prob <- rep(1/k, k)
p <- m <- dim
params <- list(
chains = chains,
lam = lam,
maxiter = maxiter,
nvld = nvld,
num_pert = num_pert,
N = N,
prob = prob,
k = k,
sigma = sigma,
p = p,
rho = rho,
m = m,
s = s,
r = r,
b = b)
print(params)
sim_result <- safe_result(params)
if(is.null(sim_result$result)){
result <- tibble(
num_pert,
N,
PROB,
k,
sigma,
p,
m,
s,
R,
B,
replication,
error = paste(sim_result$error),
llik_1 = NA,
llik_2 = NA,
llik_3 = NA,
chain_1 = NA,
chain_2 = NA,
chain_3 = NA,
acc_1 = NA,
acc_2 = NA,
acc_3 = NA
)
} else {
result <- tibble(
num_pert,
N,
PROB,
k,
sigma,
p,
m,
s,
R,
B,
replication,
error = NULL,
) %>%
bind_cols(sim_result)
}
return(result)
}
)})
qt(0.975,57)
qt(0.975,57)*(2.7/sqrt(58))
25-qt(0.975,57)*(2.7/sqrt(58))
(25-24)/(2.7/sqrt(58))
pt((25-24)/(2.7/sqrt(58)),57)
qt(0.95,1916)
p0 <- 2/3
phat <- 164/200
se <- ((p0*(1-p0))/n) %>% sqrt()
tstat <- (phat-p0)/se
tstat
library(dplyr)
p0 <- 2/3
phat <- 164/200
se <- ((p0*(1-p0))/n) %>% sqrt()
p0 <- 2/3
phat <- 164/200
n <- 200
se <- ((p0*(1-p0))/n) %>% sqrt()
tstat <- (phat-p0)/se
tstat
1-pnorm(tstat)
library(dplyr)
# future::plan("multisession",workers = 7)
source("./functions/20210205_sarrs_alex.R")
source("./simulations/20210304_large_sim_alex.R")
set.seed(19921124)
##################### FULL PARAM ##############################
# num_pert <- c(0.05,0.1,0.2)
# N <- c(50, 100, 200, 400)
# PROB <- 0.5
# k <- 2:8
# sigma <- c(0.5,1,2)
# p <- c(50, 100, 1000, 10000)
# m <- c(50, 100, 1000, 10000)
# s <- c(5, 10, 20)
# R <- 1:5 #up to 3
# B <- c(1, 5, 10)
# replication <- 1:2
###############################################################
##################### TRUNCATED PARAM ##############################
num_pert <- c(0.2)
N <- c(50, 100, 200, 400)
PROB <- 0.5
k <- 2:3
sigma <- c(1)
# p <- c(50, 100, 1000, 10000)
# m <- c(50, 100, 1000, 10000)
dim <- c(50, 100, 1000)
s <- c(5, 10, 20)
R <- 1:2 #up to 3
B <- c(1)
replication <- 1
###############################################################
safe_result <- purrr::safely(simulate_hthmix)
sim_param <- expand.grid(
num_pert = num_pert,
N = N,
PROB = PROB,
k = k,
sigma = sigma,
# p = p,
# m = m,
dim = dim,
s = s,
R = R,
B = B,
replication = replication
)
num_pert <- c(0.2)
N <- c(50, 100, 200, 400)
PROB <- 0.5
k <- 2
sigma <- c(1)
# p <- c(50, 100, 1000, 10000)
# m <- c(50, 100, 1000, 10000)
dim <- c(50, 100, 1000)
s <- c(5, 10, 20)
R <- 1:2 #up to 3
B <- c(1)
replication <- 1
###############################################################
safe_result <- purrr::safely(simulate_hthmix)
sim_param <- expand.grid(
num_pert = num_pert,
N = N,
PROB = PROB,
k = k,
sigma = sigma,
# p = p,
# m = m,
dim = dim,
s = s,
R = R,
B = B,
replication = replication
)
future::plan("multiprocess")
?install.packages
getOption("repos")
install.packages("dplyr", repo = "0")
install.packages("dplyr", repo = "0")
install.packages("dplyr", repo = "0")
install.packages("dplyr", repo = "0")
.libPaths()
pt(-0.87,197)
pt(-0.87,199)
res <- readr::read_rds("./results/20210304_large_sim_results.rds")
res %>% View()
library(dplyr)
res %>% View()
res <- readr::read_rds("./results/20210304_large_sim_results.rds")
res %>% View()
low = 78.405405
mod = 74.186441
hi = 67.785714
low - mod
mod - hi
low - hi
69.0192-38.2192
38.2192/4
30.8/45
9.5548/0.6844444
pf(13.95994, 4, 45)
1-pf(13.95994, 4, 45)
res <- readr::read_rds("./results/20210304_large_sim_results.rds")
res <- readr::read_rds("./results/20210304_large_sim_results.rds")
res
res %>% View()
res %>% View()
?qbinom
rbinom(1,52,0.5)
rbinom(1,52,0.5)
rbinom(1,52,0.5)
rbinom(1,52,0.5)
rbinom(1,52,0.5)
52/2
res <- readr::read_rds("./results/20210304_large_sim_results_k2_500c.rds")
res %>% View()
res2 <- readr::read_rds("./results/20210304_large_sim_results_100c.rds")
res2 %>% View("res2")
