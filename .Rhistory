})
undebug(hthmix)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
# fct_push_me(round(.prog/nrow(grid), digits = 2))
print(paste(.N, .k, .sigma, .dim, .s, .r, .rep, .prog))
})
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
print(paste(.N, .k, .sigma, .dim, .s, .r, .rep, .prog))
fct_simulate_run(params)
# fct_push_me(round(.prog/nrow(grid), digits = 2))
})
debug(hthmix)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
print(paste(.N, .k, .sigma, .dim, .s, .r, .rep, .prog))
fct_simulate_run(params)
# fct_push_me(round(.prog/nrow(grid), digits = 2))
})
dim(x)
dim(y)
N
load_all()
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
print(paste(.N, .k, .sigma, .dim, .s, .r, .rep, .prog))
fct_simulate_run(params)
# fct_push_me(round(.prog/nrow(grid), digits = 2))
})
result
document()
check()
install()
?furrr::future_pmap
future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1:2,]
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(options = furrr::future_options(seed = 19921124),
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(options = furrr::future_options(seed = TRUE),
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(options = furrr::future_options(seed = 1),
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
?new_future_options
?furrr::future_options
?furrr::future_pmap
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(options = furrr::future_options(seed = TRUE),
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
?stats::setNames
tibble(a=1,b=1)
tibble(a=1,b=1) %>% setNames(c("c","d"))
?as_tibble
debug(fct_rank_var)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
X_k
Y_k
svd(Y_k)
svd(Y_k)$sigma
test <- svd(Y_k)
test$d
sig <- svd(Y_k)$d
sig <- sig[sig > 0]
sigmahat <- median(sig)/sqrt(max(m,n_k))
sigmahat
document()
check()
install()
load_all()
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
res <- readRDS("G:/My Drive/Dissertation/HTH Mixture/hthmixture/simulations/results/20210709_results.rds")
res
res %>%
purrr::pluck(1)
res %>%
purrr::pluck(1, "raw")
10%%10
10%/%10
10%/%11
101%/%10
101%/%11
100%%10
1000%%10
1%%100
res <- readRDS("G:/My Drive/Dissertation/HTH Mixture/hthmixture/simulations/results/20210709_results.rds")
res
res %>%
purrr::map_dfr(.f = function(.x){
true <- .x$true
est <- .x$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / N
return(tibble(iter = .x$iter, time = .x$time, acc = acc))
})
res
res %>%
purrr::map_dfr(.f = function(.x){
true <- .x$true
est <- .x$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / 100
return(tibble(iter = .x$iter, time = .x$time, acc = acc))
})
x <- matrix(0,nrow=10,ncol=10)
x
?apply
?rowNorm
sqrt(sum(X.^2, 2))
sqrt(sum(x.^2, 2))
sqrt(sum(x^2, 2))
?norm
apply(x, 2, norm)
xmax <- apply(x, 2, norm(type="2"))
norm(.,type="2")
xmax <- apply(x, 2, ~norm(.,type="2"))
xmax <- apply(x, 2, function(.x){norm(.x,type="2")})
xmax
x <- 1:100 %>% matrix(nrow=10)
x
xmax <- apply(x, 2, function(.x){norm(.x,type="2")})
xmax
norm(x[,1])
norm(x[,1],type="2")
?apply
matrix(1:9, nrow = 3)
res <- readRDS("G:/My Drive/Dissertation/HTH Mixture/hthmixture/simulations/results/20210709_results.rds")
res %>%
purrr::map_dfr(.f = function(.x){
true <- .x$true
est <- .x$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / 100
return(tibble(iter = .x$iter, time = .x$time, acc = acc))
})
res
res %>%
purrr::map_dfr(.f = function(.x){
result <- .x %>% purrr::pluck("res")
true <- result$true
est <- result$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / .x$N
return(tibble(iter = result$iter, time = result$time, acc = acc))
})
res %>%
purrr::map_dfr(.f = function(.x){
result <- .x %>% purrr::pluck("res")
true <- result$true
est <- result$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / .x$N
return(tibble(id = .x$id, N = .x$N, k = .x$k, sigma = .x$sigma, dim = .x$dim, s = .x$s, r = .x$r, rep = .x$rep, iter = result$iter, time = result$time, acc = acc))
})
load_all()
# future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1:2,]
# future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1,]
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
result
result %>%
purrr::map_dfr(.f = function(.x){
result <- .x %>% purrr::pluck("res")
true <- result$true
est <- result$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / .x$N
return(tibble(id = .x$id, N = .x$N, k = .x$k, sigma = .x$sigma, dim = .x$dim, s = .x$s, r = .x$r, rep = .x$rep, iter = result$iter, time = result$time, acc = acc))
})
grid
# future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1,]
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
result %>%
purrr::map_dfr(.f = function(.x){
result <- .x %>% purrr::pluck("res")
true <- result$true
est <- result$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / .x$N
return(tibble(id = .x$id, N = .x$N, k = .x$k, sigma = .x$sigma, dim = .x$dim, s = .x$s, r = .x$r, rep = .x$rep, iter = result$iter, time = result$time, acc = acc))
})
debug(fct_gamma)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
undebug(fct_gamma)
debug(fct_rank_var)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
sigmahat
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
load_all()
debug(fct_rank_var)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
undebug(fct_rank_var)
debug(fct_lam_coef)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
load_all()
debug(fct_gamma)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
