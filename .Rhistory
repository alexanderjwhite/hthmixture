model$models[[1]]$assign_store
model$models[[1]]$assign_store %>% View()
model$models[[1]]$assign_store %>%
tidyr::pivot_wider(names_from = iter, values_from = assign)
model$models[[1]]$assign_store %>%
tidyr::pivot_wider(names_from = iter, values_from = assign) %>%
as.matrix()
model$models[[1]]$assign_store
model$models[[1]]$assign_store %>%
tidyr::pivot_wider(names_from = iter, values_from = assign)
?tidyr::pivot_wider
model$models[[1]]$assign_store %>%
mutate(id = row_number()) %>%
tidyr::pivot_wider(names_from = iter, values_from = assign, id_cols = id) %>%
as.matrix()
N <- model$models[[1]]$assign %>% length()
N
niter <- model$models[[1]]$assign_store$iter %>% unique() %>% max()
niter
niter <- model$models[[1]]$assign_store$iter %>% max()
niter
rep(1:N,2)
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter)) %>%
tidyr::pivot_wider(names_from = iter, values_from = assign, id_cols = id) %>%
as.matrix()
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1))
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
tidyr::pivot_wider(names_from = iter, values_from = assign, id_cols = id) %>%
as.matrix()
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign)) %>%
tidyr::pivot_wider(names_from = iter, values_from = assign, id_cols = id) %>%
as.matrix()
mod_matrix <- model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign)) %>%
tidyr::pivot_wider(names_from = iter, values_from = assign, id_cols = id) %>%
as.matrix()
mod_matrix[,-1]
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign))
library(ggplot2)
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign)) %>%
ggplot(aes(x = iter, y = id, fill = assign)) %>%
geom_tile()
model$models[[1]]$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign)) %>%
ggplot(aes(x = iter, y = id, fill = assign)) +
geom_tile()
# best_model_test %>% readr::write_rds("G:/My Drive/Dissertation/HTH Mixture/hthmixture/simulations/real data/bestk2.rds")
# best_model %>% readr::write_rds("G:/My Drive/Dissertation/HTH Mixture/hthmixture/simulations/real data/bestk3.rds")
best_model <- readr::read_rds("G:/My Drive/Dissertation/HTH Mixture/hthmixture/simulations/real data/bestk3.rds")
best_model
best_model$assign
best_model$assign$assign_store
best_model$assign$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign)) %>%
ggplot(aes(x = iter, y = id, fill = assign)) +
geom_tile()
best_model$assign
best_model$iter
best_model$assign$final_assign %>% length()
# compare with old
N <- best_model$assign$final_assign %>% length()
niter <- best_model$iter[1]
best_model$assign$assign_store %>%
mutate(id = rep(1:N,niter+1)) %>%
mutate(assign = as.factor(assign)) %>%
ggplot(aes(x = iter, y = id, fill = assign)) +
geom_tile()
model$models
load_all()
x <- as.matrix(dat.mrm)
y <- as.matrix(dat.vol.std)
k <- 3
nstart = 1
maxiter = 1e3
N <- x %>% nrow()
assignments <- NULL
likelihood <- NULL
A <- NULL
clust_assign <- fct_initialize(k, N)
N <- nrow(x)
p <- ncol(x)
m <- ncol(y)
iter <- 0
conv <- Inf
clust_store <- tibble(iter=rep(iter,N),assign=clust_assign)
ll_store <- tibble(iter = 0, ll = -Inf)
iter <- iter + 1
# print(clust_assign)
pi_vec <- fct_pi_vec(clust_assign, k, N)
pi_vec
gamma_model <- fct_gamma(x, y, k, N, clust_assign)
gamma_model
gamma <- gamma_model$gamma
gamma
fct_weighted_ll(gamma)
fct_update_clust(gamma, N)
table(fct_update_clust(gamma, N))
gamma <- gamma_model$gamma
# print(gamma)
A <- gamma_model$A
sig_vec <- gamma_model$sig_vec
weighted_ll <- fct_weighted_ll(gamma)
ll_store <- ll_store %>% bind_rows(tibble(iter = iter, ll = weighted_ll))
clust_assign_old <- clust_assign
clust_assign <- fct_update_clust(gamma, N)
clust_store <- clust_store %>% bind_rows(tibble(iter = rep(iter,N), assign=clust_assign))
conv <- (clust_assign != clust_assign_old) %>% sum()
print(paste("i: ",iter, "| conv: ", conv))
iter <- iter + 1
# print(clust_assign)
pi_vec <- fct_pi_vec(clust_assign, k, N)
pi_vec
gamma_model <- fct_gamma(x, y, k, N, clust_assign)
gamma <- gamma_model$gamma
# print(gamma)
A <- gamma_model$A
sig_vec <- gamma_model$sig_vec
fct_update_clust(gamma, N)
A
dim(A)
length(A)
A[[1]]
A[[2]]
A[[3]]
NMF::aheatmap
install.packages("NMF")
NMF::aheatmap(A[[1]],Rowv = NA, Colv = NA)
NMF::aheatmap(A[[2]],Rowv = NA, Colv = NA)
NMF::aheatmap(A[[3]],Rowv = NA, Colv = NA)
dim(A[[1]])
dim(A[[2]])
dim(x)
dim(y)
clust_assign
i=1
cluster_rows <- which((clust_assign==i))
?sample
cluster_rows
val_frac <- 0.2
val_frac*nrow(x_k)
n_k <- length(cluster_rows)
x_k <- x[cluster_rows,]
y_k <- y[cluster_rows, ]
eta_k <- sqrt(2*m) + sqrt(2*min(n_k,p))
(val_frac*n_k)
val_size <- ifelse((val_frac*n_k) < 1, n_k*0.5, (val_frac*n_k))
val_size
val_rows <- sample(cluster_rows, size = val_size)
val_rows
cluster_rows
!val_rows
!(cluster_rows %in% val_rows)
which(!(cluster_rows %in% val_rows))
x_train <- x_k[train_rows,]
x_test <- x_k[val_rows,]
y_train <- y_k[train_rows,]
val_rows
cluster_rows <- which((clust_assign==i))
n_k <- length(cluster_rows)
x_k <- x[cluster_rows,]
y_k <- y[cluster_rows, ]
eta_k <- sqrt(2*m) + sqrt(2*min(n_k,p))
n_k
val_size <- ifelse((val_frac*n_k) < 1, (n_k*0.5), (val_frac*n_k))
val_rows <- sample(cluster_rows, size = val_size)
train_rows <- which(!(cluster_rows %in% val_rows))
x_train <- x_k[train_rows,]
x_test <- x_k[val_rows,]
dim(x_k)
val_rows
cluster_rows
val_rows <- sample(1:length(cluster_rows), size = val_size)
val_rows
train_rows <- which(!((1:length(cluster_rows)) %in% val_rows))
train_rows
x_train <- x_k[train_rows,]
x_test <- x_k[val_rows,]
y_train <- y_k[train_rows,]
y_test <- y_k[val_rows]
grid <- seq(-5,4,1)
grid
grid <- seq(-5,4,1)
load_all()
dim(x)
N <- x %>% nrow()
assignments <- NULL
likelihood <- NULL
A <- NULL
clust_assign <- fct_initialize(k, N)
clust_assign
N <- nrow(x)
p <- ncol(x)
m <- ncol(y)
iter <- 0
conv <- Inf
clust_store <- tibble(iter=rep(iter,N),assign=clust_assign)
ll_store <- tibble(iter = 0, ll = -Inf)
iter <- iter + 1
# print(clust_assign)
pi_vec <- fct_pi_vec(clust_assign, k, N)
gamma_model <- fct_gamma(x, y, k, N, clust_assign)
gamma <- gamma_model$gamma
# print(gamma)
A <- gamma_model$A
sig_vec <- gamma_model$sig_vec
gamma
# NMF::aheatmap(A[[1]],Rowv = NA, Colv = NA)
clust_assign_1 <- clust_assign
ll_store <- ll_store %>% bind_rows(tibble(iter = iter, ll = weighted_ll))
clust_assign_old <- clust_assign
clust_assign <- fct_update_clust(gamma, N)
clust_store <- clust_store %>% bind_rows(tibble(iter = rep(iter,N), assign=clust_assign))
conv <- (clust_assign != clust_assign_old) %>% sum()
print(paste("i: ",iter, "| conv: ", conv))
# print(clust_assign)
pi_vec <- fct_pi_vec(clust_assign, k, N)
pi_vec
NMF::aheatmap(A[[1]],Rowv = NA, Colv = NA)
NMF::aheatmap(A[[2]],Rowv = NA, Colv = NA)
cluster_rows <- which((clust_assign==i))
n_k <- length(cluster_rows)
x_k <- x[cluster_rows,]
y_k <- y[cluster_rows, ]
eta_k <- sqrt(2*m) + sqrt(2*min(n_k,p))
n_k
val_size <- ifelse((val_frac*n_k) < 1, (n_k*0.5), (val_frac*n_k))
val_rows <- sample(1:length(cluster_rows), size = val_size)
train_rows <- which(!((1:length(cluster_rows)) %in% val_rows))
x_train <- x_k[train_rows,]
x_test <- x_k[val_rows,]
y_train <- y_k[train_rows,]
y_test <- y_k[val_rows]
sigma_hat <- fct_sigma(y_k, n_k, m)
rank_hat <- fct_rank(x, y, sigma_hat, eta_k)
lam_univ <- fct_lambda(sigma_hat, p, n_k)
lam_univ
lam_grid <- (2^(grid/2))*lam_univ
lam_grid
sigma_hat <- fct_sigma(y_k, n_k, m)
sigma_hat
rank_hat <- fct_rank(x_k, y_k, sigma_hat, eta_k)
rank_hat
lam_univ <- fct_lambda(sigma_hat, p, n_k)
lam_univ
lam_grid
lam_grid
models <- NULL
errors <- rep(0,length(lam_grid))
?fct_sarrs
models <- c(models,list(fct_sarrs(y_train, x_train, rank_hat, lam_grid[j], alpha, beta, sigma_hat, "grLasso")))
alpha <- 2*sqrt(3)
beta <- 1
p <- dim(x)[2]
m <- dim(y)[2]
val_frac <- 0.2
grid <- seq(-5,4,1)
j=1
models <- NULL
errors <- rep(0,length(lam_grid))
models <- c(models,list(fct_sarrs(y_train, x_train, rank_hat, lam_grid[j], alpha, beta, sigma_hat, "grLasso")))
models
models[[1]]
models <- NULL
errors <- rep(0,length(lam_grid))
for (j in 1:length(lam_grid)){
model_j <- fct_sarrs(y_train, x_train, rank_hat, lam_grid[j], alpha, beta, sigma_hat, "grLasso")
errors[j] <- mean((y_test-(cbind(x_test,1) %*% model_j$Ahat))^2)
models <- c(models,list(model_j))
}
errors
# NMF::aheatmap(A[[2]],Rowv = NA, Colv = NA)
# clust_assign_1 <- clust_assign
errors_1 <- errors
grid_1 <- grid
lam_grid_1 <- lam_grid
grid <- seq(5,15,1)
lam_grid <- (2^(grid/2))*lam_univ
lam_grid
models <- NULL
errors <- rep(0,length(lam_grid))
for (j in 1:length(lam_grid)){
print(j)
model_j <- fct_sarrs(y_train, x_train, rank_hat, lam_grid[j], alpha, beta, sigma_hat, "grLasso")
errors[j] <- mean((y_test-(cbind(x_test,1) %*% model_j$Ahat))^2)
models <- c(models,list(model_j))
}
errors
models[[11]]
models[[11]]$Ahat
NMF::aheatmap(models[[11]]$Ahat,Rowv = NA, Colv = NA)
dim(x)
dim(y)
NMF::aheatmap(models[[10]]$Ahat,Rowv = NA, Colv = NA)
NMF::aheatmap(models[[1]]$Ahat,Rowv = NA, Colv = NA)
rank_hat
sigma_hat
Y <- y_train
X <- x_train
r <- rank_hat
lam_grid
lam <- 5
alpha
beta
sigma
sigma_hat
sigma <- sigma_hat
ptype <- "grLasso"
n= dim(X)[1]
p= dim(X)[2]
m= dim(Y)[2]
group = rep(1:(p+1),r)
Y_thresh <- matrix(0, ncol = m, nrow = n)
Y_thresh
thresh_1 <- sigma^2*(n+alpha*sqrt(n*log(max(p,m))))
thresh_1
j0 <- which(apply(Y, 2, function(x){sum(x^2)}) >= thresh_1)
Y0 <- Y_thresh
j0
Y0[,j0] <- Y[,j0]
V0 = svd(Y0,nu=r,nv=r)$v
XX = kronecker(diag(rep(1,r)),cbind(X,1))
YY = Y %*% V0
YY = as.vector(YY)
fit1 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B1= matrix(fit1$beta[-1],nrow=p+1,ncol=r)
B1[p+1,]=B1[p+1,]+fit1$beta[1]
XB=cbind(X,1) %*% matrix(B1,nrow=p+1,ncol=r)
U1= svd(XB,nu=r,nv=r)$u
thresh_2 <- beta*sigma^2*(r + 2*sqrt(3*r*log(max(p,m))) + 6*log(max(p,m)))
j1_tmp <- which(apply(Y, 2, function(x){sum((t(U1)%*%matrix(x))^2)}) > thresh_2)
j1 <- sort(unique(c(j0, j1_tmp)))
Y1 <- Y_thresh
Y1[,j1] <- Y[,j1]
tmp= U1%*%t(U1)%*%Y1
V1= svd(tmp,nu=r,nv=r)$v
YY = Y %*% V1
YY = as.vector(YY)
fit2 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B2= matrix(fit2$beta[-1],nrow=p+1,ncol=r)
B2[p+1,]=B2[p+1,]+fit2$beta[1]
Ahat= B2 %*% t(V1)
NMF::aheatmap(Ahat,Rowv = NA, Colv = NA)
lam=0
n= dim(X)[1]
p= dim(X)[2]
m= dim(Y)[2]
group = rep(1:(p+1),r)
Y_thresh <- matrix(0, ncol = m, nrow = n)
thresh_1 <- sigma^2*(n+alpha*sqrt(n*log(max(p,m))))
j0 <- which(apply(Y, 2, function(x){sum(x^2)}) >= thresh_1)
Y0 <- Y_thresh
Y0[,j0] <- Y[,j0]
V0 = svd(Y0,nu=r,nv=r)$v
XX = kronecker(diag(rep(1,r)),cbind(X,1))
YY = Y %*% V0
YY = as.vector(YY)
fit1 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B1= matrix(fit1$beta[-1],nrow=p+1,ncol=r)
B1[p+1,]=B1[p+1,]+fit1$beta[1]
XB=cbind(X,1) %*% matrix(B1,nrow=p+1,ncol=r)
U1= svd(XB,nu=r,nv=r)$u
thresh_2 <- beta*sigma^2*(r + 2*sqrt(3*r*log(max(p,m))) + 6*log(max(p,m)))
j1_tmp <- which(apply(Y, 2, function(x){sum((t(U1)%*%matrix(x))^2)}) > thresh_2)
j1 <- sort(unique(c(j0, j1_tmp)))
Y1 <- Y_thresh
Y1[,j1] <- Y[,j1]
tmp= U1%*%t(U1)%*%Y1
V1= svd(tmp,nu=r,nv=r)$v
YY = Y %*% V1
YY = as.vector(YY)
fit2 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B2= matrix(fit2$beta[-1],nrow=p+1,ncol=r)
B2[p+1,]=B2[p+1,]+fit2$beta[1]
Ahat= B2 %*% t(V1)
NMF::aheatmap(Ahat,Rowv = NA, Colv = NA)
Ahat
# clust_assign_1 <- clust_assign
# errors_1 <- errors
# grid_1 <- grid
# lam_grid_1 <- lam_grid
errors_2 <- errors
grid_2 <- grid
lam_grid_2 <- lam_grid
grid <- seq(-10,-2,1)
lam_grid <- (2^(grid/2))*lam_univ
lam_grid
models <- NULL
errors <- rep(0,length(lam_grid))
for (j in 1:length(lam_grid)){
print(j)
model_j <- fct_sarrs(y_train, x_train, rank_hat, lam_grid[j], alpha, beta, sigma_hat, "grLasso")
errors[j] <- mean((y_test-(cbind(x_test,1) %*% model_j$Ahat))^2)
models <- c(models,list(model_j))
}
errors
NMF::aheatmap(Ahat,Rowv = NA, Colv = NA)
NMF::aheatmap(models[[1]]$Ahat,Rowv = NA, Colv = NA)
dim(models[[1]]$Ahat)
models[[1]]$Ahat[315,]
models[[1]]$Ahat[315:321,]
n= dim(X)[1]
p= dim(X)[2]
m= dim(Y)[2]
group = rep(1:(p+1),r)
Y_thresh <- matrix(0, ncol = m, nrow = n)
thresh_1 <- sigma^2*(n+alpha*sqrt(n*log(max(p,m))))
j0 <- which(apply(Y, 2, function(x){sum(x^2)}) >= thresh_1)
Y0 <- Y_thresh
Y0[,j0] <- Y[,j0]
V0 = svd(Y0,nu=r,nv=r)$v
V0
XX = kronecker(diag(rep(1,r)),cbind(X,1))
YY = Y %*% V0
YY = as.vector(YY)
fit1 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B1= matrix(fit1$beta[-1],nrow=p+1,ncol=r)
B1[p+1,]=B1[p+1,]+fit1$beta[1]
XB=cbind(X,1) %*% matrix(B1,nrow=p+1,ncol=r)
XB
U1= svd(XB,nu=r,nv=r)$u
U1
thresh_2 <- beta*sigma^2*(r + 2*sqrt(3*r*log(max(p,m))) + 6*log(max(p,m)))
j1_tmp <- which(apply(Y, 2, function(x){sum((t(U1)%*%matrix(x))^2)}) > thresh_2)
j1 <- sort(unique(c(j0, j1_tmp)))
Y1 <- Y_thresh
Y1[,j1] <- Y[,j1]
Y1
tmp= U1%*%t(U1)%*%Y1
V1= svd(tmp,nu=r,nv=r)$v
V1
YY = Y %*% V1
YY = as.vector(YY)
fit2 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B2= matrix(fit2$beta[-1],nrow=p+1,ncol=r)
B2[p+1,]=B2[p+1,]+fit2$beta[1]
B2
Ahat= B2 %*% t(V1)
Ahat
NMF::aheatmap(Ahat,Rowv = NA, Colv = NA)
grid <- seq(-8,8,1)
length(grid)
errors_1
grid_2
errors_2
# results
# results_old <- read.table("G:/My Drive/Dissertation/HTH Mixture/iu_2022_07_26_02/summary.csv")
results <- read.table("G:/My Drive/Dissertation/HTH Mixture/iu_2022_07_27_02/summary.csv")
colnames(results) <- c("N", "k", "rho", "sigma", "p", "m", "s_x", "s_y", "rank", "b", "ari_mean", "ari_sd", "time_mean", "time_sd")
results %>% filter(s_x == 10 & s_y == 10 & rank == 4) %>% View()
# results
# results_old <- read.table("G:/My Drive/Dissertation/HTH Mixture/iu_2022_07_26_02/summary.csv")
results <- read.table("G:/My Drive/Dissertation/HTH Mixture/iu_2022_07_27_02/summary.csv")
colnames(results) <- c("N", "k", "rho", "sigma", "p", "m", "s_x", "s_y", "rank", "b", "ari_mean", "ari_sd", "time_mean", "time_sd")
# colnames(results_old) <- c("N", "k", "rho", "sigma", "p", "m", "s_x", "s_y", "rank", "b", "ari_mean", "ari_sd", "time_mean", "time_sd")
View(results)
results %>% filter(s_x == 10 & s_y == 10 & rank == 4) %>% View()
results %>% filter(s_x == 10 & s_y == 10 & rank == 4)
results %>% dplyr::filter(s_x == 10 & s_y == 10 & rank == 4) %>% View()
B2
dim(B2)
dim(V1)
lam_univ
lam=lam_univ
n= dim(X)[1]
p= dim(X)[2]
m= dim(Y)[2]
group = rep(1:(p+1),r)
Y_thresh <- matrix(0, ncol = m, nrow = n)
thresh_1 <- sigma^2*(n+alpha*sqrt(n*log(max(p,m))))
j0 <- which(apply(Y, 2, function(x){sum(x^2)}) >= thresh_1)
Y0 <- Y_thresh
Y0[,j0] <- Y[,j0]
V0 = svd(Y0,nu=r,nv=r)$v
XX = kronecker(diag(rep(1,r)),cbind(X,1))
YY = Y %*% V0
YY = as.vector(YY)
fit1 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B1= matrix(fit1$beta[-1],nrow=p+1,ncol=r)
B1[p+1,]=B1[p+1,]+fit1$beta[1]
XB=cbind(X,1) %*% matrix(B1,nrow=p+1,ncol=r)
U1= svd(XB,nu=r,nv=r)$u
thresh_2 <- beta*sigma^2*(r + 2*sqrt(3*r*log(max(p,m))) + 6*log(max(p,m)))
j1_tmp <- which(apply(Y, 2, function(x){sum((t(U1)%*%matrix(x))^2)}) > thresh_2)
j1 <- sort(unique(c(j0, j1_tmp)))
Y1 <- Y_thresh
Y1[,j1] <- Y[,j1]
tmp= U1%*%t(U1)%*%Y1
V1= svd(tmp,nu=r,nv=r)$v
YY = Y %*% V1
YY = as.vector(YY)
fit2 = grpreg::grpreg(XX,YY,group,lambda=lam, penalty= ptype, family="gaussian")
B2= matrix(fit2$beta[-1],nrow=p+1,ncol=r)
B2[p+1,]=B2[p+1,]+fit2$beta[1]
Ahat= B2 %*% t(V1)
NMF::aheatmap(Ahat,Rowv = NA, Colv = NA)
lam
lam_grid_1
errors_1
lam_grid_2
errors_2
