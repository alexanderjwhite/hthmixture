m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
results <- safe_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
result
options(error=recover)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
purrr::pmap(
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
if(.dim == "small"){
p <- 500
m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
# results <- safe_run(params)
results <- fct_simulate_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
safe_run <- purrr::safely(fct_simulate_run)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
purrr::pmap(
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
if(.dim == "small"){
p <- 500
m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
results <- safe_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
grid
start <- Sys.time()
Sys.time()-start
test <- Sys.time()-start
test
test
test[1]
as.numeric(test)
tictoc::tic()
time <- tictoc::toc()
time
time$toc-time$tic
kmeans(diag(nrow=100,ncol=100))
options(error=NULL)
kmeans(diag(nrow=100,ncol=100),2)
model_kmeans <- kmeans(diag(nrow=100,ncol=100),2)
?valse::runValse
load_all()
safe_run <- purrr::safely(fct_simulate_run)
grid
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
purrr::pmap(
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
if(.dim == "small"){
p <- 500
m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
results <- safe_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
load_all()
params
grid <- params %>%
slice(rep(1:nrow(params),20)) %>%
mutate(rep = rep(1:nrow(params),20)) %>%
slice(2)
grid
safe_run <- purrr::safely(fct_simulate_run)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
purrr::pmap(
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
if(.dim == "small"){
p <- 500
m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
results <- safe_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
debugonce(fct_simulate_run)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
purrr::pmap(
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
if(.dim == "small"){
p <- 500
m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
results <- safe_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
maxiter <- params %>% purrr::pluck("maxiter")
N <- params %>% purrr::pluck("N")
k <- params %>% purrr::pluck("k")
rho <- params %>% purrr::pluck("rho")
sigma <- params %>% purrr::pluck("sigma")
p <- params %>% purrr::pluck("p")
m <- params %>% purrr::pluck("m")
s <- params %>% purrr::pluck("s")
r <- params %>% purrr::pluck("r")
b <- params %>% purrr::pluck("b")
prob <- rep(1/k,k)
int <- prob %>% cumsum()
rand_assign <- stats::runif(N)
clust_assign_true <- (rand_assign) %>%
purrr::map_int(.f = function(.x){
clust <- (.x <= int) %>%
which() %>%
min()
return(clust)
}) %>%
sort()
clust_assign_true_key <- clust_assign_true %>%
dplyr::tibble() %>%
dplyr::mutate(order = 1:N) %>%
dplyr::arrange((.))
clust_assign_true_vec <- clust_assign_true_key %>%
dplyr::pull(order)
n <- clust_assign_true %>%
dplyr::as_tibble() %>%
dplyr::group_by(value) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::pull(n)
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
print("starting hth")
model_hth <- hthmix(x, y, k, rank = r[1], chains = 1, maxiter = maxiter, penal_search = 1:100/100)
dim(x)
dim(y)
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
x
clust_assign_true
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
k
clust_min
clust_max
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
clust_iter
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
i=1
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
i=2
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
dim(x)
dim(y)
print("starting hth")
model_hth <- hthmix(x, y, k, rank = r[1], chains = 1, maxiter = maxiter, penal_search = 1:100/100)
Q
load_all()
safe_run <- purrr::safely(fct_simulate_run)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(.options = furrr::future_options(seed = TRUE),
purrr::pmap(
.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
if(.dim == "small"){
p <- 500
m <- 50
} else {
p <- 1e3
m <- 200
}
params <- list(
maxiter = 3,
N = .N,
k = .k,
sigma = .sigma,
p = p,
rho = rep(0,.k),
m = m,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 10) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
results <- safe_run(params)
if(is.null(results$error)){
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$result))
} else {
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = results$error))
}
})
result
document()
check()
install()
library(devtools)
N_lab <- "N"
k_lab <- "k"
sigma_lab <- "sigma"
dim_lab <- "dim"
s_lab <- "s"
r_lab <- "r"
names(N_lab) <- "N"
names(k_lab) <- "k"
names(sigma_lab) <- "sigma"
names(dim_lab) <- "dim"
names(s_lab) <- "s"
names(r_lab) <- "r"
N_param <- dials::new_qual_param(
type = "character",
values = c("200","400"),
label = N_lab
)
k_param <- dials::new_qual_param(
type = "character",
values = c("2","3"),
label = k_lab
)
sigma_param <- dials::new_qual_param(
type = "character",
values = c("1","small", "large"),
label = sigma_lab
)
dim_param <- dials::new_qual_param(
type = "character",
values = c("small","large"),
label = dim_lab
)
s_param <- dials::new_qual_param(
type = "character",
values = c("5","10"),
label = s_lab
)
r_param <- dials::new_qual_param(
type = "character",
values = c("1","2"),
label = r_lab
)
param_dials <- list(N_param, k_param, sigma_param, dim_param, s_param, r_param)
params <- dials::grid_latin_hypercube(param_dials, size = 15) %>%
mutate(N = as.numeric(N),
k = as.numeric(k),
s = as.numeric(s),
r = as.numeric(r))
grid <- params %>%
slice(rep(1:nrow(params),20)) %>%
mutate(rep = rep(1:nrow(params),20))
library(dplyr)
N_lab <- "N"
k_lab <- "k"
sigma_lab <- "sigma"
dim_lab <- "dim"
s_lab <- "s"
r_lab <- "r"
names(N_lab) <- "N"
names(k_lab) <- "k"
names(sigma_lab) <- "sigma"
names(dim_lab) <- "dim"
names(s_lab) <- "s"
names(r_lab) <- "r"
N_param <- dials::new_qual_param(
type = "character",
values = c("200","400"),
label = N_lab
)
k_param <- dials::new_qual_param(
type = "character",
values = c("2","3"),
label = k_lab
)
sigma_param <- dials::new_qual_param(
type = "character",
values = c("1","small", "large"),
label = sigma_lab
)
dim_param <- dials::new_qual_param(
type = "character",
values = c("small","large"),
label = dim_lab
)
s_param <- dials::new_qual_param(
type = "character",
values = c("5","10"),
label = s_lab
)
r_param <- dials::new_qual_param(
type = "character",
values = c("1","2"),
label = r_lab
)
param_dials <- list(N_param, k_param, sigma_param, dim_param, s_param, r_param)
params <- dials::grid_latin_hypercube(param_dials, size = 15) %>%
mutate(N = as.numeric(N),
k = as.numeric(k),
s = as.numeric(s),
r = as.numeric(r))
grid <- params %>%
slice(rep(1:nrow(params),20)) %>%
mutate(rep = rep(1:nrow(params),20))
grid
memory.limit
memory.limit()
?memory.limit
