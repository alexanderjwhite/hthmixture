m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
result
result %>%
purrr::map_dfr(.f = function(.x){
result <- .x %>% purrr::pluck("res")
true <- result$true
est <- result$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / .x$N
return(tibble(id = .x$id, N = .x$N, k = .x$k, sigma = .x$sigma, dim = .x$dim, s = .x$s, r = .x$r, rep = .x$rep, iter = result$iter, time = result$time, acc = acc))
})
grid
# future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1,]
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
result %>%
purrr::map_dfr(.f = function(.x){
result <- .x %>% purrr::pluck("res")
true <- result$true
est <- result$est
shuffle <- clue::solve_LSAP(table(true, est), maximum = TRUE)
acctbl <- (table(true, est)[,shuffle])
acc <- (acctbl %>% diag() %>% sum()) / .x$N
return(tibble(id = .x$id, N = .x$N, k = .x$k, sigma = .x$sigma, dim = .x$dim, s = .x$s, r = .x$r, rep = .x$rep, iter = result$iter, time = result$time, acc = acc))
})
debug(fct_gamma)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
undebug(fct_gamma)
debug(fct_rank_var)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
sigmahat
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
load_all()
debug(fct_rank_var)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
undebug(fct_rank_var)
debug(fct_lam_coef)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
load_all()
debug(fct_gamma)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
# furrr::future_pmap(options = future_options(seed = 19921124),
#   .f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
if((.prog %% 100) == 0){
fct_push_me(round(.prog/nrow(grid), digits = 2))
}
return(list(N = .N, k = .k, sigma = .sigma, dim = .dim, s = .s, r = .r, rep = .rep, id = .prog, res = fct_simulate_run(params)))
})
library(devtools)
library(dplyr)
library(hthmixture)
N <- c(100,200)
k <- 2:3
sigma <- 1:2
dim <- c(50,200)
s <- c(10,20)
r <- 1:2
rep <- 1:10
# future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1,]
.N=100
.k=2
.sigma=1
.dim=200
.s=10
.r=1
.rep=1
params <- list(
maxiter = 1e3,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
maxiter <- params %>% purrr::pluck("maxiter")
N <- params %>% purrr::pluck("N")
k <- params %>% purrr::pluck("k")
rho <- params %>% purrr::pluck("rho")
sigma <- params %>% purrr::pluck("sigma")
p <- params %>% purrr::pluck("p")
m <- params %>% purrr::pluck("m")
s <- params %>% purrr::pluck("s")
r <- params %>% purrr::pluck("r")
b <- params %>% purrr::pluck("b")
prob <- rep(1/k,k)
int <- prob %>% cumsum()
rand_assign <- stats::runif(N)
clust_assign_true <- (rand_assign) %>%
purrr::map_int(.f = function(.x){
clust <- (.x <= int) %>%
which() %>%
min()
return(clust)
}) %>%
sort()
clust_assign_true_key <- clust_assign_true %>%
dplyr::tibble() %>%
dplyr::mutate(order = 1:N) %>%
dplyr::arrange((.))
clust_assign_true_vec <- clust_assign_true_key %>%
dplyr::pull(order)
n <- clust_assign_true %>%
dplyr::as_tibble() %>%
dplyr::group_by(value) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::pull(n)
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
dim(x)
dim(y)
.k
.r
split_data <- fct_data_split(x, y, val_frac)
val_frac=0.2
split_data <- fct_data_split(x, y, val_frac)
x_train <- split_data %>%
purrr::pluck("x_train")
x_test <- split_data %>%
purrr::pluck("x_test")
y_train <- split_data %>%
purrr::pluck("y_train")
y_test <- split_data %>%
purrr::pluck("y_test")
model <- hthmix(x_train,
y_train,
.k,
lam = NULL,
rank = .r,
chains = chains,
maxiter = maxiter,
verbose = verbose,
val_frac = val_frac,
penal_search = penal_search
)
chains=1
maxiter
verbose
TRUE
maxiter=3
val_frac
penal_search
penal_search=1:20/20
model <- hthmix(x_train,
y_train,
.k,
lam = NULL,
rank = .r,
chains = chains,
maxiter = maxiter,
verbose = verbose,
val_frac = val_frac,
penal_search = penal_search
)
model
A <- model %>%
purrr::pluck("result", "assign", "A")
sig_vec <- model %>%
purrr::pluck("result", "assign", "sig_vec")
A
sig_vec
load_all()
model <- hthmix(x_train,
y_train,
.k,
lam = NULL,
rank = .r,
chains = chains,
maxiter = maxiter,
verbose = verbose,
val_frac = val_frac,
penal_search = penal_search
)
A <- model %>%
purrr::pluck("result", "assign", "A")
sig_vec <- model %>%
purrr::pluck("result", "assign", "sig_vec")
A
sig_vec
load_all()
model <- hthmix(x_train,
y_train,
.k,
lam = NULL,
rank = .r,
chains = chains,
maxiter = maxiter,
verbose = verbose,
val_frac = val_frac,
penal_search = penal_search
)
gamma_calc
A <- gamma_calc %>%
purrr::map(.f = function(.x){.x %>% purrr::pluck("A_k")})
A
sig_vec <- gamma_calc %>%
purrr::map(.f = function(.x){.x %>% purrr::pluck("sig_vec")})
sig_vec
load_all()
model <- hthmix(x_train,
y_train,
.k,
lam = NULL,
rank = .r,
chains = chains,
maxiter = maxiter,
verbose = verbose,
val_frac = val_frac,
penal_search = penal_search
)
A <- model %>%
purrr::pluck("result", "assign", "A")
sig_vec <- model %>%
purrr::pluck("result", "assign", "sig_vec")
sig_vec
sig_vec %>% dim()
sig_vec[[1]] %>% dim()
sig_vec[[1]] %>% length()
.x=1
A_k <- A %>% purrr::pluck(.x)
sig_k <- sig_vec %>% purrr::pluck(.x)
A_k
sig_k
mu_mat <- (x %>%
dplyr::bind_cols(int = rep(1,N)) %>%
as.matrix()) %*% A_k
mu_mat
N <- x %>% nrow()
N
mu_mat <- (x %>%
dplyr::bind_cols(int = rep(1,N)) %>%
as.matrix()) %*% A_k
m <- y %>% ncol()
gam <- fct_log_lik(mu_mat, sig_k, y, N, m)
gam
est_assign <- 1:k %>%
list() %>%
purrr::pmap_dfc(.f = function(.x){
A_k <- A %>% purrr::pluck(.x)
sig_k <- sig_vec %>% purrr::pluck(.x)
mu_mat <- (x %>%
dplyr::bind_cols(int = rep(1,N)) %>%
as.matrix()) %*% A_k
gam <- fct_log_lik(mu_mat, sig_k, y, N, m)
return(tibble(gam))
})
est_assign
load_all()
est_assign <- 1:k %>%
list() %>%
purrr::pmap_dfc(.f = function(.x){
A_k <- A %>% purrr::pluck(.x)
sig_k <- sig_vec %>% purrr::pluck(.x)
mu_mat <- (x %>%
dplyr::bind_cols(int = rep(1,N)) %>%
as.matrix()) %*% A_k
gam <- fct_log_lik(mu_mat, sig_k, y, N, m)
return(tibble(gam))
}) %>%
fct_update_clust(N)
est_assign
load_all()
.k
.r
split_data <- fct_data_split(x, y, val_frac)
x_train <- split_data %>%
purrr::pluck("x_train")
x_test <- split_data %>%
purrr::pluck("x_test")
y_train <- split_data %>%
purrr::pluck("y_train")
y_test <- split_data %>%
purrr::pluck("y_test")
model <- hthmix(x_train,
y_train,
.k,
lam = NULL,
rank = .r,
chains = chains,
maxiter = maxiter,
verbose = verbose,
val_frac = val_frac,
penal_search = penal_search
)
error <- fct_full_model_error(x_test, y_test, .k, model)
error
params <- list(
maxiter = 1e3,
N = 100,
k = 2,
sigma = 1,
p = 100,
rho = rep(0,2),
m = 100,
s = 10,
r = rep(1,2),
b = (1:2)*5)
maxiter <- params %>% purrr::pluck("maxiter")
N <- params %>% purrr::pluck("N")
k <- params %>% purrr::pluck("k")
rho <- params %>% purrr::pluck("rho")
sigma <- params %>% purrr::pluck("sigma")
p <- params %>% purrr::pluck("p")
m <- params %>% purrr::pluck("m")
s <- params %>% purrr::pluck("s")
r <- params %>% purrr::pluck("r")
b <- params %>% purrr::pluck("b")
prob <- rep(1/k,k)
int <- prob %>% cumsum()
rand_assign <- stats::runif(N)
clust_assign_true <- (rand_assign) %>%
purrr::map_int(.f = function(.x){
clust <- (.x <= int) %>%
which() %>%
min()
return(clust)
}) %>%
sort()
clust_assign_true_key <- clust_assign_true %>%
dplyr::tibble() %>%
dplyr::mutate(order = 1:N) %>%
dplyr::arrange((.))
clust_assign_true_vec <- clust_assign_true_key %>%
dplyr::pull(order)
n <- clust_assign_true %>%
dplyr::as_tibble() %>%
dplyr::group_by(value) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::pull(n)
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
model <- hthmix_cv(x, y, k_min = 2, k_max = 4, r_min = 1, r_max = 2, chains = 1, maxiter = maxiter, penal_search = 1:100/100)
library(dplyr)
library(hthmixture)
N <- c(100,200)
k <- 2:3
sigma <- 1:2
dim <- c(50,200)
s <- c(10,20)
r <- 1:2
rep <- 1:5
future::plan("multicore")
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))
grid
grid %>% dim(*)
grid %>% dim()
