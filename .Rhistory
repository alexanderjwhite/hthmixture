clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
y %>% summary()
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
y %>% summary()
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
y %>% summary()
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
y %>% summary()
maxiter=3
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
y %>% summary()
model <- hthmix(x, y, chains = 1, maxiter = maxiter)
y %>% summary()
print(params)
params <- list(maxiter=3,N=100,k=2,sigma=1,p=100,rho=c(0,0),m=100,s=10,r=c(1,1),b=c(5,10))
params
maxiter <- params %>% purrr::pluck("maxiter")
N <- params %>% purrr::pluck("N")
k <- params %>% purrr::pluck("k")
rho <- params %>% purrr::pluck("rho")
sigma <- params %>% purrr::pluck("sigma")
p <- params %>% purrr::pluck("p")
m <- params %>% purrr::pluck("m")
s <- params %>% purrr::pluck("s")
r <- params %>% purrr::pluck("r")
b <- params %>% purrr::pluck("b")
maxiter <- params %>% purrr::pluck("maxiter")
N <- params %>% purrr::pluck("N")
k <- params %>% purrr::pluck("k")
rho <- params %>% purrr::pluck("rho")
sigma <- params %>% purrr::pluck("sigma")
p <- params %>% purrr::pluck("p")
m <- params %>% purrr::pluck("m")
s <- params %>% purrr::pluck("s")
r <- params %>% purrr::pluck("r")
b <- params %>% purrr::pluck("b")
prob <- rep(1/k,k)
int <- prob %>% cumsum()
rand_assign <- stats::runif(N)
clust_assign_true <- (rand_assign) %>%
purrr::map_int(.f = function(.x){
clust <- (.x <= int) %>%
which() %>%
min()
return(clust)
}) %>%
sort()
clust_assign_true_key <- clust_assign_true %>%
dplyr::tibble() %>%
dplyr::mutate(order = 1:N) %>%
dplyr::arrange((.))
clust_assign_true_vec <- clust_assign_true_key %>%
dplyr::pull(order)
n <- clust_assign_true %>%
dplyr::as_tibble() %>%
dplyr::group_by(value) %>%
dplyr::summarize(n = dplyr::n()) %>%
dplyr::pull(n)
clust_iter <- 1
clust_min <- 1
clust_max <- s
x <- NULL
y <- NULL
for(i in 1:k){
a_rows <- clust_min:clust_max
clust_iter <- clust_iter + 1
clust_min <- clust_max+1
clust_max <- clust_iter*s
sim <- fct_sim_mixrrr(n[i],a_rows,p,m,r[i],rho[i],sigma,b[i])
x <- x %>% rbind(sim$X)
y <- y %>% rbind(sim$Y)
}
x <- x[clust_assign_true_vec,]
y <- y[clust_assign_true_vec,]
y %>% summary()
model <- hthmix(x, y, chains = 1, maxiter = maxiter)
model
final_assign <- model %>% purrr::pluck("result","assign","final_assign")
iter <- model %>% purrr::pluck("result", "iter", 1)
time <- model %>% purrr::pluck("time")
list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = ifelse(k==2,c(5,10),c(5,10,20)))
# print(params)
fct_simulate_run(params)
})
print(params)
list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = ifelse(k==2,c(5,10),c(5,10,20)))
print(params)
fct_simulate_run(params)
})
k
ifelse(k==2,c(5,10),c(5,10,20))
k
k==2
ifelse(k==2,c(5,10),c(5,10,20))
1:k
1:k*5
1:k*5
list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
print(params)
fct_simulate_run(params)
})
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1:2,]
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep) %>%
purrr::pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
})
result
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
})
1:nrow(grid)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
print(.prog/nrow(grid))
})
round
?round
round(.234234234)
round(.234234234, digits = 2)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
?saveRDS
library(dplyr)
?saveRDS
document()
check()
document()
check()
document()
check()
install()
library(dplyr)
library(hthmixture)
N <- c(100,200)
k <- 2:3
sigma <- 1:2
dim <- c(50,200)
s <- c(10,20)
r <- 1:2
rep <- 1:10
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1:2,]
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
load_all
load_all()
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
fct_simulate_run(params)
x
model <- hthmix(x, y, chains = 1, maxiter = maxiter)
dim(x)
dim(y)
debugSource("G:/My Drive/Dissertation/HTH Mixture/hthmixture/R/fct_gamma.R")
model <- hthmix(x, y, chains = 1, maxiter = maxiter)
load_all()
rm(list = c("fct_gamma"))
load_all()
model <- hthmix(x, y, chains = 1, maxiter = maxiter)
clust_assign
cluster_rows <- (clust_assign==.x) %>%
which()
n_k <- cluster_rows %>%
length()
X_k <- x %>%
dplyr::as_tibble() %>%
dplyr::slice(cluster_rows) %>%
as.matrix()
Y_k <- y %>%
dplyr::as_tibble() %>%
dplyr::slice(cluster_rows) %>%
as.matrix()
val_rows <- cluster_rows %>%
dplyr::tibble() %>%
dplyr::slice_sample(prop = val_frac) %>%
pull()
val_fra=+0.2
val_rows <- cluster_rows %>%
dplyr::tibble() %>%
dplyr::slice_sample(prop = val_frac) %>%
pull()
val_frac=0.2
val_rows <- cluster_rows %>%
dplyr::tibble() %>%
dplyr::slice_sample(prop = val_frac) %>%
pull()
train_rows <- cluster_rows %>%
dplyr::tibble() %>%
dplyr::filter(!((.) %in% val_rows)) %>%
dplyr::pull()
split_data <- fct_data_split(X_k, Y_k, val_frac)
x_train <- split_data %>%
purrr::pluck("x_train")
x_test <- split_data %>%
purrr::pluck("x_test")
y_train <- split_data %>%
purrr::pluck("y_train")
y_test <- split_data %>%
purrr::pluck("y_test")
n_train <- split_data %>%
purrr::pluck("n_train")
n_test <- split_data %>%
purrr::pluck("n_test")
rank_var_test <- fct_rank_var(x_train, y_train, n_test, p, m)
rank_search <- 1
sigmahat_test <- rank_var_test %>%
purrr::pluck("sigmahat")
grid_search <- expand.grid(lam = penal_search, r = rank_search)
.l=1
.r=1
model <- fct_sarrs(y_train,x_train,.r, lam, "grLasso")
lam_0 <- 2*sigmahat_test*max(sqrt(colSums(x_train^2)))/n_train/.r*(sqrt(.r)+2*sqrt(log(p)))
# lam_0 <- 1
lam <- .l*lam_0
model <- fct_sarrs(y_train,x_train,.r, lam, "grLasso")
error <- mean((y_test-(cbind(x_test,1) %*% model$Ahat))^2)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
grid_search
sigmahat_test
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
source("G:/My Drive/Dissertation/HTH Mixture/hthmixture/R/fct_gamma.R")
library(devtools)
load_all()
library(dplyr)
# library(hthmixture)
N <- c(100,200)
k <- 2:3
sigma <- 1:2
dim <- c(50,200)
s <- c(10,20)
r <- 1:2
rep <- 1:10
grid <- (expand.grid(N=N,k=k,sigma=sigma,dim=dim,s=s,r=r,rep=rep))[1:2,]
grid
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
debugonce(fct_simulate_run)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
x
y
print(x)
print(y)
clust_assign
n
n
debugonce(fct_simulate_run)
result <- list(grid$N, grid$k, grid$sigma, grid$dim, grid$s, grid$r, grid$rep,1:nrow(grid)) %>%
furrr::future_pmap(.f = function(.N, .k, .sigma, .dim, .s, .r, .rep, .prog){
params <- list(
maxiter = 2,
N = .N,
k = .k,
sigma = .sigma,
p = .dim,
rho = rep(0,.k),
m = .dim,
s = .s,
r = rep(.r,.k),
b = (1:.k)*5)
fct_simulate_run(params)
fct_push_me(round(.prog/nrow(grid), digits = 2))
})
print("hi")
fct_pert_assign(clust_assign, lik_store, N, k)
.c <- 1
fct_hthmix_comp(x, y, k, maxiter, lam, rank, clust_assign, val_frac, penal_search)
fct_hthmix_comp(x, y, k, maxiter, lam, rank, clust_assign, val_frac, penal_search)
